@attribute [Route($"/{nameof(TaskForm)}/{{Key?}}")]
@using System.Text.RegularExpressions
@using ShiftSoftware.ShiftEntity.Model.Dtos
@using ShiftSoftware.ShiftIdentity.Core.DTOs.User
@using ToDo.Shared.DTOs.Task
@using ToDo.Shared.Enums
@inherits ShiftForm<TaskForm, TaskDTO>
@inject SettingManager SettingManager

<ShiftEntityForm @bind-Mode="Mode"
                 @bind-Value="TheItem"
                 @ref="FormContainer"
                 Action="Task"
                 Title="Task"
                 TypeAuthAction="ToDo.Shared.ToDoActions.Task"
                 @bind-Key="@Key">

    <MudTextFieldExtended OnlyValidateIfDirty="true"
                          Label="Name"
                          @bind-Value="TheItem.Name"
                          For="@(() => TheItem.Name)" />

    <MudTextFieldExtended OnlyValidateIfDirty="true"
                          Label="Description"
                          @bind-Value="TheItem.Description"
                          For="@(() => TheItem.Description)" />

    <MudDatePicker @bind-Date="@TheItem.DueDate"
                   Label="Due Date"
                   For="@(() => TheItem.DueDate)"
                   Disabled="Disabled"
                   ReadOnly="ReadOnly"/>

    <ShiftAutocomplete T="ShiftEntitySelectDTO"
                       TEntitySet="UserListDTO"
                       Label="Assigned User"
                       DataTextField="@nameof(UserListDTO.FullName)"
                       DataValueField="@nameof(UserListDTO.ID)"
                       EntitySet="IdentityUser"
                       For="() => TheItem.AssignedTo"
                       @bind-Value="@TheItem.AssignedTo">

    </ShiftAutocomplete>

    <MudSelectExtended OnlyValidateIfDirty="true"
               T="_TaskStatus"
               Label="Status"
               AnchorOrigin="Origin.BottomCenter"
               @bind-Value="TheItem.Status"
               For="@(() => TheItem.Status)">

        @foreach (var status in Enum.GetValues<_TaskStatus>())
        {
            <MudSelectItem Value="@status">@Regex.Replace(status.ToString(), "([A-Z])", " $1").TrimStart()</MudSelectItem>
        }
    </MudSelectExtended>

    <FileUploader Url="/file/upload"
                  ShowThumbnail="true"
                  Label="Attachments"
                  TypeAuthAction="ToDo.Shared.ToDoActions.UploadFiles"
    @bind-Values="TheItem.Files" />

    @if (Mode == FormModes.View && !string.IsNullOrWhiteSpace(TheItem.ID))
    {
        <TaskList ParentTaskId="@TheItem.ID">

        </TaskList>
    }

</ShiftEntityForm>

@code {
    [Parameter]
    public string? ParentTaskId { get; set; }

    protected override void OnInitialized()
    {
        Mode = FormModes.View;

        if (!string.IsNullOrWhiteSpace(ParentTaskId))
        {
            TheItem.ParentTaskId = ParentTaskId;
        }
    }

}